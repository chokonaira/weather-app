{"version":3,"sources":["assets/clouds.gif","assets/rain.gif","assets/sun.gif","assets/clear-sky.gif","components/WeatherCard.tsx","redux/actions/types.ts","helpers/api.ts","helpers/dateFormatter.ts","constants/defaultChartData.ts","redux/actions/weather.ts","components/TemperatureRadio.tsx","components/RefreshButton.tsx","components/Spinner.tsx","constants/city.ts","components/CitySelect.tsx","helpers/GifSelector.ts","components/BarChart.tsx","App.tsx","redux/reducers/weather.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["WeatherCard","gifBackground","description","temperature","date","className","src","alt","WEATHER_LOADING","WEATHER_SUCCESS","WEATHER_ERROR","REFRESH_LOADING","REFRESH_ERROR","CONVERT_TEMPERATURE","CHART_DATA_SUCCESS","dotenv","config","baseURL","key","axiosInstance","axios","create","this","process","addZero","i","dateFormatter","d","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","dafaultChartData","time","weatherLoading","type","types","weatherError","payload","fetchWeather","defaultCity","defaultScale","dispatch","a","Api","get","then","data","convertTemperatures","catch","error","message","newScale","newWeatherData","list","map","t","convertedTemperature","kelvinToCelciusFahrenheitFormular","main","temp","dt_txt","weather","scale","city","name","buildBarChartData","item","chartData","forEach","itemDate","otherDates","dateOne","dateTwo","isSameDay","getTime","formatTemperature","Number","substring","length","push","chartDataSuccess","celcius","Math","round","fahrenheit","TemperatureRadio","useDispatch","React","useState","setScale","FormControl","component","RadioGroup","value","onChange","event","target","FormControlLabel","label","checked","control","Radio","RefreshButton","title","variant","loading","LoadingButton","onClick","currentCity","currentScale","loadingPosition","endIcon","Spinner","Box","sx","display","CircularProgress","color","size","cities","id","CitySelect","selectedCity","fullWidth","InputLabel","Select","labelId","MenuItem","selected","Image","selectGif","Clouds","require","default","Rain","Sun","Clear","BarChart","Paper","valueField","argumentField","text","App","useSelector","state","isFetchingWeather","isRefreshingWeather","errors","useEffect","enableSwipe","isRTL","itemsToShow","transitionMs","index","handleBarChart","GifSelector","initialState","action","rootReducer","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cf1c4ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clouds.2b8ecda2.gif\";","export default __webpack_public_path__ + \"static/media/rain.ad71a4ef.gif\";","export default __webpack_public_path__ + \"static/media/sun.5e4ba486.gif\";","export default __webpack_public_path__ + \"static/media/clear-sky.07b94d03.gif\";","import * as React from 'react';\n\ntype Props = {\n  gifBackground: string;\n  description: string;\n  temperature: string;\n  date: string;\n}\n\nconst WeatherCard: React.FC<Props> = ({ gifBackground, description, temperature, date }) => {\n  return (\n    <div className=\"weather-card-wrapper\">\n      <img className=\"weather-card-gif\" src={gifBackground} alt=\"weather-gif\" />\n      <h1 className=\"description\">{description}</h1>\n      <h2 className=\"temperture\">{temperature}</h2>\n      <h1 className=\"date\">{date}</h1>\n    </div>\n  );\n}\n\nexport default WeatherCard;","export const WEATHER_LOADING = 'WEATHER_LOADING';\nexport const WEATHER_SUCCESS = 'WEATHER_SUCCESS';\nexport const WEATHER_ERROR = 'WEATHER_ERROR';\nexport const REFRESH_LOADING = 'REFRESH_LOADING';\nexport const REFRESH_SUCCESS = 'REFRESH_SUCCESS';\nexport const REFRESH_ERROR = 'REFRESH_ERROR';\nexport const CONVERT_TEMPERATURE = 'CONVERT_TEMPERATURE';\nexport const CHART_DATA_SUCCESS = 'CHART_DATA_SUCCESS';\n","import axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport { ApiConfig } from \"../constants/types\";\n\ndotenv.config();\n\nconst config: ApiConfig = {\n  baseURL: \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast\",\n};\nclass Api {\n  key: string | undefined;\n  constructor() {\n    this.key = process.env.REACT_APP_API_KEY;\n  }\n  axiosInstance = axios.create(config);\n}\n\nexport default new Api();\n","import { MonthFormat } from \"../constants/types\";\n\nconst addZero = (i: number | string) => {\n  if (i < 10) {\n    i = `0${i}`;\n  }\n  return i;\n};\n\nexport const dateFormatter = (d: string): string => {\n  const MONTH_FORMAT: MonthFormat = {\n    1: \"January\",\n    2: \"February\",\n    3: \"March\",\n    4: \"April\",\n    5: \"May\",\n    6: \"June\",\n    7: \"July\",\n    8: \"August\",\n    9: \"September\",\n    10: \"October\",\n    11: \"November\",\n    12: \"December\",\n  };\n\n  const date = new Date(d),\n    day = date.getDate(),\n    month = date.getMonth(),\n    year = date.getFullYear(),\n    hour = addZero(date.getHours()),\n    minute = addZero(date.getMinutes());\n\n  return `${day} ${MONTH_FORMAT[month + 1]}, ${year}. ${hour}:${minute}`;\n};\n\nexport const isSameDay = (itemDate: string, otherDates: string) => {\n  const dateOne = new Date(itemDate);\n  const dateTwo = new Date(otherDates);\n\n  return (\n    dateOne.getFullYear() === dateTwo.getFullYear() &&\n    dateOne.getMonth() === dateTwo.getMonth() &&\n    dateOne.getDate() === dateTwo.getDate()\n  );\n};\n\nexport const getTime = (date: string) => {\n  const time = new Date(date),\n    hour = addZero(time.getHours()),\n    minute = addZero(time.getMinutes());\n\n  return `${hour}:${minute}`;\n};\n","\nimport { ChartData } from \"./types\";\n\nexport const dafaultChartData: ChartData[] = [\n\n  { time: \"00:00\", temperature: 1 },\n  { time: \"03:00\", temperature: 1 },\n  { time: \"06:00\", temperature: 1 },\n  { time: \"09:00\", temperature: 1 },\n  { time: \"12:00\", temperature: 1 },\n  { time: \"15:00\", temperature: 1 },\n  { time: \"18:00\", temperature: 1 },\n  { time: \"21:00\", temperature: 1 },\n];\n","import * as types from \"./types\";\nimport Api from \"../../helpers/api\";\nimport { isSameDay, getTime } from \"../../helpers/dateFormatter\";\nimport { dafaultChartData } from \"../../constants/defaultChartData\";\n\nimport {\n  RootState,\n  StoreDispatch,\n  WeatherList,\n  ScaleType,\n  Weather,\n  AxiosResponseType,\n  WeatherData,\n  NewWeather,\n  ChartData\n} from \"../../constants/types\";\n\nconst weatherLoading = () => ({\n  type: types.WEATHER_LOADING,\n});\n\nconst weatherSuccess = (payload: Weather | any) => ({\n  type: types.WEATHER_SUCCESS,\n  payload,\n});\n\nconst weatherError = (payload: RootState) => ({\n  type: types.WEATHER_ERROR,\n  payload,\n});\n\nconst refreshLoading = () => ({\n  type: types.REFRESH_LOADING,\n});\n\nconst refreshError = (payload: RootState) => ({\n  type: types.REFRESH_ERROR,\n  payload,\n});\n\nconst chartDataSuccess = (payload: ChartData[] = dafaultChartData) => ({\n  type: types.CHART_DATA_SUCCESS,\n  payload,\n});\n\nexport const fetchWeather = (defaultCity: string = \"Munich\", defaultScale: string = \"celcius\") => async (dispatch: StoreDispatch\n  ) => {\n    dispatch(weatherLoading());\n\n    return Api.axiosInstance\n      .get(`?q=${defaultCity}&APPID=${Api.key}&cnt=40`)\n      .then(({ data }: AxiosResponseType) => {\n        \n        dispatch(convertTemperatures(data, defaultScale));\n      })\n      .catch((error) => {\n        dispatch(weatherError(error.message));\n      });\n  };\n\nexport const refreshCurrentCityWeather = (currentCity: string, currentScale: string) => async (dispatch: StoreDispatch\n  ) => {\n    dispatch(refreshLoading());\n\n    return Api.axiosInstance\n      .get(`?q=${currentCity}&APPID=${Api.key}&cnt=40`)\n      .then(({ data }: AxiosResponseType) => {\n\n        dispatch(convertTemperatures(data, currentScale));\n      })\n      .catch((error) => {\n        dispatch(refreshError(error.message));\n      });\n  };\n\nexport const convertTemperatures = (data: Weather, newScale: string) => async (dispatch: StoreDispatch\n  ) => {\n    const newWeatherData = data.list.map((t: WeatherList) => {\n        const convertedTemperature = kelvinToCelciusFahrenheitFormular(\n          t.main.temp,\n          newScale\n        );\n      return { convertedTemperature, date: t.dt_txt, ...t.weather[0] };\n    });\n      dispatch(weatherSuccess({data, scale: newScale, city: data.city.name, newWeatherData }));\n  };\n\n  export const buildBarChartData = (item: WeatherData, weather: NewWeather) => (dispatch: StoreDispatch\n    ) => {\n    let chartData: ChartData[] = [];\n    weather.newWeatherData.forEach((data: WeatherData) => {\n      if (isSameDay(item.date, data.date)) {\n        const time = getTime(data.date);\n        const formatTemperature = Number(data.convertedTemperature.substring(0,data.convertedTemperature.length - 2));\n        chartData.push({ time, temperature: formatTemperature });\n      }\n    });\n    dispatch(chartDataSuccess(chartData));\n  };\n\nconst kelvinToCelciusFahrenheitFormular = (\n  temperature: number,\n  scale: string\n): string => {\n  const scaleType: ScaleType = {\n    celcius: `${Math.round(temperature - 273.15)}°C`,\n    fahrenheit: `${Math.round(((temperature - 273.15) * 9/5) + 32)}°F`,\n  };\n  return scaleType[scale];\n};","import React from 'react';\nimport { Radio, FormControlLabel, RadioGroup, FormControl } from '@mui/material';\nimport { convertTemperatures } from '../redux/actions/weather';\nimport { useDispatch } from \"react-redux\";\nimport { NewWeather } from '../constants/types'\n\ntype Props = {\n  weather: NewWeather,\n}\n\nconst TemperatureRadio: React.FC<Props> = ({ weather }) => {\n\n  const dispatch = useDispatch();\n  const [scale, setScale] = React.useState<string>('celcius');\n\n  const handleChange = (event: React.SyntheticEvent<Element, Event>) => {\n    const value = (event.target as HTMLInputElement).value;\n    setScale(value);\n    dispatch(convertTemperatures(weather.data, value));\n  }\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        value={scale}\n        name=\"controlled-radio-buttons-group\"\n        className=\"radio\"\n        onChange={handleChange}\n      >\n        <FormControlLabel\n          label=\"Celcius\"\n          value=\"celcius\"\n          checked={scale === 'celcius'}\n          control={\n            <Radio />\n          }\n        />\n        <FormControlLabel\n          label=\"Fahrenheit\"\n          value=\"fahrenheit\"\n          checked={scale === 'fahrenheit'}\n          control={\n            <Radio />\n          }\n        />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default TemperatureRadio;\n","import React from 'react';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Refresh from '@mui/icons-material/Refresh';\nimport { useDispatch } from \"react-redux\";\nimport { refreshCurrentCityWeather } from \"../redux/actions/weather\";\nimport { NewWeather } from \"../constants/types\";\n\ntype Props = {\n  title: string,\n  variant: \"text\" | \"outlined\" | \"contained\",\n  loading: boolean,\n  weather: NewWeather,\n}\n\nconst RefreshButton: React.FC<Props> = ({ title, variant, loading, weather }) => {\n  const dispatch = useDispatch();\n\n  const handleRefresh = () => {\n    dispatch(refreshCurrentCityWeather(weather.city, weather.scale))\n  };\n\n  return (\n    <LoadingButton\n      onClick={handleRefresh}\n      loading={loading}\n      loadingPosition=\"end\"\n      variant={variant}\n      endIcon={<Refresh />} >\n      {title}\n    </LoadingButton>\n  )\n}\nexport default RefreshButton;","import * as React from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\n\nconst Spinner: React.FC = () => {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CircularProgress color=\"primary\" size={60} />\n    </Box>\n  );\n}\n\nexport default Spinner;","import { Cities } from \"./types\";\n\nexport const cities: Cities = [\n  { id: 1, name: \"Munich\" },\n  { id: 2, name: \"Berlin\" },\n  { id: 3, name: \"Hamburg\" },\n  { id: 5, name: \"Stuttgart\" },\n  { id: 4, name: \"Leipzig\" },\n];\n","import * as React from 'react';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { useDispatch } from \"react-redux\";\nimport { fetchWeather } from \"../redux/actions/weather\";\nimport { NewWeather } from '../constants/types'\nimport { cities } from '../constants/city'\n\ntype Props = {\n  weather: NewWeather,\n}\n\nconst CitySelect: React.FC<Props> = ({ weather }) => {\n  const dispatch = useDispatch();\n\n  const handleChange = (event: SelectChangeEvent): void => {\n    dispatch(fetchWeather(event.target.value));\n  };\n\n  const selectedCity = (): string => {\n    if (weather.city) {\n      return weather.city\n    } else {\n      return cities[0].name\n    }\n  }\n  return (\n    <div className=\"select-dropdown\">\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">Cities</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={selectedCity()}\n          label=\"Cities\"\n          onChange={handleChange}\n        >\n          {cities.map(city => <MenuItem\n            selected={city.name === selectedCity()}\n            key={city.id}\n            value={city.name}>\n            {city.name}\n          </MenuItem>)\n          }\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default CitySelect;\n","import { WeatherImage } from '../constants/types';\nclass GifSelector {\n  Image: WeatherImage;\n  constructor() {\n    this.Image = {\n      Clouds: require(\"../assets/clouds.gif\").default,\n      Rain: require(\"../assets/rain.gif\").default,\n      Sun: require(\"../assets/sun.gif\").default,\n      Clear: require(\"../assets/clear-sky.gif\").default,\n    };\n  }\n\n  selectGif = (weather: string): string => {\n    return this.Image[weather];\n  };\n}\n\nexport default new GifSelector();\n","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n  ValueAxis,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\nimport { ChartData } from '../constants/types';\nimport { dafaultChartData } from \"./../constants/defaultChartData\";\n\ntype Props = {\n  chartData: ChartData[]\n}\nconst BarChart: React.FC<Props> = ({ chartData }) => {\n\n  const data = () => {\n    if(chartData?.length > 0) {\n      return chartData\n    } else {\n      return dafaultChartData\n    }\n  }\n\n  return (\n    <Paper>\n      <Chart\n        data={data()}\n      >\n        <ArgumentAxis />\n        <ValueAxis />\n\n        <BarSeries\n          valueField=\"temperature\"\n          argumentField=\"time\"\n        />\n        <Title text=\"Click card to see daily weather time and temperature preview\" />\n        <Animation />\n      </Chart>\n    </Paper>\n  );\n}\n\nexport default BarChart;\n","import React from 'react';\nimport Carousel from 'react-elastic-carousel';\nimport WeatherCard from './components/WeatherCard';\nimport TemperatureRadio from './components/TemperatureRadio';\nimport RefreshButton from './components/RefreshButton';\nimport Spinner from './components/Spinner';\nimport CitySelect from './components/CitySelect';\nimport { fetchWeather, buildBarChartData } from \"./redux/actions/weather\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState, WeatherData, NewWeather } from './constants/types'\nimport GifSelector from './helpers/GifSelector'\nimport { dateFormatter } from './helpers/dateFormatter';\nimport BarChart from './components/BarChart';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const { isFetchingWeather, isRefreshingWeather, errors, weather, chartData } =\n    useSelector((state: RootState) => state.fetchWeather);\n\n  React.useEffect(() => {\n    dispatch(fetchWeather())\n  }, [dispatch])\n\n  const handleBarChart = (item: WeatherData, weather: NewWeather) => {\n    dispatch(buildBarChartData(item, weather))\n  }\n\n  return (\n    <>\n      {isFetchingWeather ?\n        (<div className=\"spinner\"><Spinner /></div>) :\n        <>\n          {errors ?\n            (<div className=\"error\">{errors}</div>) :\n            <div className=\"App\">\n              <div className=\"App-header\">\n                <div className=\"control-wrapper\">\n                  <CitySelect\n                    weather={weather}\n                  />\n                  <RefreshButton\n                    variant=\"outlined\"\n                    title=\"Refresh\"\n                    loading={isRefreshingWeather}\n                    weather={weather}\n                  />\n                </div>\n                <TemperatureRadio\n                  weather={weather}\n                />\n                <Carousel\n                  enableSwipe={false}\n                  isRTL={false}\n                  itemsToShow={3}\n                  transitionMs={1000}\n                >\n                  {weather?.newWeatherData?.map((item: WeatherData, index: number) =>\n                    <div onClick={() => handleBarChart(item, weather)} className=\"weather-card\" key={index}>\n                      <WeatherCard\n                        gifBackground={GifSelector.selectGif(item.main)}\n                        description={item.description}\n                        temperature={item.convertedTemperature}\n                        date={dateFormatter(item.date)}\n                      />\n                    </div>\n                  )}\n                </Carousel>\n              </div>\n              <div className=\"bar-chat\">\n              <BarChart chartData={chartData} />\n              </div>\n            </div>\n          }\n        </>\n      }\n    </>\n  );\n}\n\nexport default App;","import * as types from \"../actions/types\";\nimport { InitialState } from \"../../constants/types\";\n\nconst initialState: InitialState = {\n  isFetchingWeather: false,\n  isRefreshingWeather: false,\n  weather: [],\n  chartData: [],\n  errors: \"\",\n};\n\nconst fetchWeather = (state = initialState, action: any) => {\n  switch (action.type) {\n    case types.WEATHER_LOADING:\n      return {\n        ...state,\n        isFetchingWeather: true,\n      };\n    case types.WEATHER_SUCCESS:\n      return {\n        ...state,\n        isFetchingWeather: false,\n        isRefreshingWeather: false,\n        weather: action.payload,\n      };\n    case types.WEATHER_ERROR:\n      return {\n        ...state,\n        isFetchingWeather: false,\n        isRefreshingWeather: false,\n        errors: action.payload,\n      };\n    case types.REFRESH_LOADING:\n      return {\n        ...state,\n        isRefreshingWeather: true,\n      };\n    case types.REFRESH_ERROR:\n      return {\n        ...state,\n        isRefreshingWeather: false,\n        errors: action.payload,\n      };\n    case types.CONVERT_TEMPERATURE:\n      return {\n        ...state,\n        weather: action.payload,\n      };\n    case types.CHART_DATA_SUCCESS:\n      return {\n        ...state,\n        chartData: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default fetchWeather;\n","import { combineReducers } from \"redux\";\nimport fetchWeather from \"./weather\";\n\nexport const rootReducer = combineReducers({ fetchWeather });\nexport type RootState = ReturnType<typeof rootReducer>\n","\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {rootReducer} from './reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nconst middleware = [thunk];\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(...middleware),\n  ),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}